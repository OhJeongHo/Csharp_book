/*
 * 인터페이스는 클래스 또는 구조체에 포함될 수 있는 관련 있는 메소드들을 묶어 관리.
 * 인터페이스는 interface 키워드를 사용하여 만듦.
 * 인터페이스는 실행 가능한 코드와 데이터를 포함하고 있지 않다.
 * 추상 클래스처럼 다른 클래스에 멤버 이름을 미리 정의할 때 사용함.
 * 추상 클래스와 다른 점은 멤버 내용을 구현하지 않고 멤버 이름만 정의
 * 인터페이스에는 메소드, 속성, 인덱서 및 이벤트를 정의할 수 있다.
 * 현실 세계에서 전 세계 표준과 같은 기능.
 * 단일 상속만 지원하는 클래스와 달리 인터페이스를 사용한 다중 상속이 가능
 * 인터페이스 멤버는 액세스 한정자를 붙이지 않으며 항상 public이고, virtual 및 static을 붙일 수 없다.
 * 인터페이스 이름은 대문자 I로 시작한다.
 * 인터페이스는 인스턴스화 되지 않는다. 클래스를 사용해서 인스턴스화 됨.
 * I인터페이스 i = new 클래스();
 * 인터페이스는 계약의 의미가 강하며 속성, 메소드, 이벤트, 인덱서 등 구조를 미리 정의함.
 */


/*
 * 일반적으로 웹 프로그래밍 또는 데이터베이스 프로그래밍에서는 인터페이스를 먼저 설계하고, 이를 구현하는 클래스를 하나 이상 만들곤 함.
 */


/*
 * 인터페이스와 추상 클래스 비교
 * 추상클래스
 *      구현된 코드가 들어옴.
 *      즉, 메소드 시그니처만 있는 것이 아니라 사용 가능한 실제로 구현된 메소드도 들어옴
 *      단일 상속 : 기본 클래스에서 상속될 수 있음.
 *      각 멤버는 액세스 한정자를 갖는다.
 *      필드, 속성, 생성자, 소멸자, 메소드, 이벤트, 인덱서 등을 갖음.
 * 인터페이스
 *      인터페이스는 규약
 *      구현된 코드가 없음
 *      다중 상속 : 여러 가지 인터페이스에서 상속 가능
 *      모든 멤버는 자동으로 public임
 *      속성, 메소드, 이벤트와 대리자를 멤버로 갖음
 */